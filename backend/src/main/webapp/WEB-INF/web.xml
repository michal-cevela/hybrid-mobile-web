<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
	
	<display-name>Angular-Workshop</display-name>
	
	<!-- Spring: Context-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			WEB-INF/spring/applicationContext.xml
			WEB-INF/spring/cxf-ws.xml
			WEB-INF/spring/rabbit.xml
		</param-value>
	</context-param>
<!--
	<context-param>
		<param-name>contextClass</param-name>
		<param-value>org.springframework.web.context.support.XmlWebApplicationContext</param-value>
	</context-param>
-->
	<context-param>
		<param-name>initializeContextOnStartup</param-name>
		<param-value>true</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
<!--
	<listener>
		<listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
	</listener>
-->
	
	<!-- Apache CXF: Transport Servlet -->
	<servlet>
		<servlet-name>CXFServlet</servlet-name>
		<servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
		
		<!-- Swagger security filter -->
		<!--init-param>
			<param-name>swagger.security.filter</param-name>
			<param-value>cz.angular.cordova.ws.util.ApiAuthorizationFilter</param-value>
		</init-param-->
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
	<servlet-mapping>
		<servlet-name>CXFServlet</servlet-name>
		<url-pattern>/api/*</url-pattern>
	</servlet-mapping>

	<!-- Atmosphere: Servlet -->
	<servlet>
		<description>AtmosphereServlet</description>
		<servlet-name>AtmosphereServlet</servlet-name>
		<servlet-class>org.atmosphere.cpr.AtmosphereServlet</servlet-class>
<!--
		<init-param>
			<param-name>org.atmosphere.cpr.packages</param-name>
			<param-value>cz.angular.cordova.atmosphere</param-value>
		</init-param>
-->
		<init-param>
			<param-name>org.atmosphere.cpr.asyncSupport</param-name>
			<param-value>org.atmosphere.container.Tomcat7BIOSupportWithWebSocket</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.cpr.broadcasterClass</param-name>
			<param-value>org.atmosphere.util.SimpleBroadcaster</param-value>
			<!-- org.atmosphere.cpr.DefaultBroadcaster, org.atmosphere.util.SimpleBroadcaster -->
		</init-param>
		<init-param>
			<param-name>org.atmosphere.cpr.broadcasterCacheClass</param-name>
			<param-value>org.atmosphere.cache.UUIDBroadcasterCache</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.cpr.broadcaster.maxProcessingThreads</param-name>
			<param-value>20</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.cpr.broadcaster.maxAsyncWriteThreads</param-name>
			<param-value>20</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.cpr.broadcasterLifeCyclePolicy</param-name>
			<param-value>EMPTY_DESTROY</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.cpr.broadcaster.shareableThreadPool</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.cpr.recoverFromDestroyedBroadcaster</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.websocket.messageContentType</param-name>
			<param-value>application/json</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.useWebSocketAndServlet3</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.cpr.broadcastFilterClasses</param-name> 
			<param-value>org.atmosphere.client.TrackMessageSizeFilter</param-value>
		</init-param>
<!--
		<init-param>
			<param-name>org.atmosphere.cpr.broadcasterClassName</param-name> 
			<param-value>org.atmosphere.plugin.org.atmosphere.plugin.redis.RedisBroadcaster</param-value> 
		</init-param>
-->
		<load-on-startup>0</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
	<servlet-mapping>
		<servlet-name>AtmosphereServlet</servlet-name>
		<url-pattern>/atmosphere/*</url-pattern>
	</servlet-mapping>

	<!-- Filter: Character encoding (UTF-8) -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
		
	<session-config>
		<session-timeout>30</session-timeout>
	</session-config>
</web-app>
